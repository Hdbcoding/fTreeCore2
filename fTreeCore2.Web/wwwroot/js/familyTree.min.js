(function($, window, undefined){
    'use strict';
    var canvasApi = window.canvasApi = window.canvasApi || {};
    var defaults = {
        container: '', // container selector
        width: 500,
        height: 500
    };

    var canvases = [];

    //canvas API prototype
    // pwease no steppy on _private fields
    var canvasProto = {
        _init: function(container, width, height){
            this._container = container;
            this._width = width;
            this._height = height;
            this._$canvas = this._$canvas || $('<canvas>')
                .attr({width: width, height: height})
                .appendTo(container);
            this._elements = this._elements || [];
            this._ctx = this.ctx || this._$canvas[0].getContext('2d');
        },
        clear: function(){
            this._ctx.save();
            this._ctx.fillstyle = 'black';
            this._ctx.fillRect(0, 0, this._width, this._height);
            this._ctx.restore();
        },
        addElement: function(element){
            if (!this._elements.includes(element)){
                this._elements.push(element);
            }
        },
        render: function(){
            this.clear();
            for (let i = 0; i < this._elements.length; i++){
                this._elements[i].draw(this._ctx);
            }
        }
    };

    canvasApi.init = function(inputSettings){
        var settings = $.extend(true, {}, defaults, inputSettings);

        //only one canvas per container. If we've already added a canvas here return the old one
        var old = getCanvas(settings.container);
        if (old) return old;

        //create canvas using the ~~prototype~~
        let instance = Object.create(canvasProto);
        instance._init(settings.container, settings.width, settings.height);
        instance.clear();
        return instance;
    }

    function getCanvas(container){
        for (let i = 0; i < canvases.length; i++){
            var objInstance = canvases[i];
            if (objInstance.container == container) return objInstance;
        }
        return false;
    }
})($, window);
(function ($, window, undefined) {
    'use strict';
    var visualElement = window.visualElement = window.visualElement || {};
    var defaults = {
        x: 0,
        y: 0,
        width: 50,
        height: 50,
        drawOptions: {
            fillStyle: 'white',
            strokeStyle: 'red',
        },
        drawCallback: visualElement.drawSquare
    };

    var elementProto = {
        _init: function (x, y, width, height, drawOptions, drawCallback) {
            this._x = x;
            this._y = y;
            this._width = width;
            this._height = height;
            this._drawOptions = drawOptions;
            this._drawCallback = drawCallback;
        },
        draw: function (ctx) {
            if ($.isFunction(this._drawCallback)) this._drawCallback(ctx);
            else visualElement.drawSquare.call(this, ctx);
        }
    };

    visualElement.createElement = function (inputSettings) {
        var settings = $.extend(true, {}, defaults, inputSettings);
        var instance = Object.create(elementProto);
        instance._init(settings.x, settings.y, settings.width, settings.height, settings.drawOptions, settings.drawCallback);
        return instance;
    }

    visualElement.drawSquare = function (ctx) {
        ctx.save();

        ctx.rect(this._x, this._y, this._width, this._height);
        ctx.fillStyle = this._drawOptions.fillStyle;
        ctx.fill();
        ctx.strokeStyle = this._drawOptions.strokeStyle;
        ctx.stroke();

        ctx.restore();
    }
})(jQuery, window);